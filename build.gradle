plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    // Starter for building web, including RESTful, applications using Spring MVC.
    // Uses Tomcat as the default embedded container (deprecated in favor of spring-boot-starter-webmvc)
    implementation("org.springframework.boot:spring-boot-starter-web")

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
    // Core starter, including auto-configuration support, logging and YAML
    implementation("org.springframework.boot:spring-boot-starter")

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop
    // Starter for aspect-oriented programming with Spring AOP and AspectJ
    implementation("org.springframework.boot:spring-boot-starter-aop")

    // https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    // The AspectJ runtime is a small library necessary to run Java programs enhanced by AspectJ aspects
    // during a previous compile-time or post-compile-time (binary weaving) build step.
    runtimeOnly("org.aspectj:aspectjrt")

    // https://mvnrepository.com/artifact/org.aspectj/aspectjweaver
    // The AspectJ weaver applies aspects to Java classes.
    // It can be used as a Java agent in order to apply load-time weaving (LTW)
    // during class-loading and also contains the AspectJ runtime classes.
    runtimeOnly("org.aspectj:aspectjweaver")

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    // Lombok is a Java library that provides annotations to simplify Java development by automating the generation of boilerplate code.
    // Key features include automatic generation of getters, setters, equals, hashCode, and toString methods,
    // as well as a facility for automatic resource management.
    // It aims to reduce the amount of manual coding, thereby streamlining the codebase and reducing potential for errors.
    implementation("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
    // Starter for testing Spring Boot applications with libraries including JUnit Jupiter, Hamcrest and Mockito
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

test {
    useJUnitPlatform()
}